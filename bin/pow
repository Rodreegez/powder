#!/usr/bin/ruby

require 'rubygems'
require 'thor'
require 'fileutils'
require "net/https"
require 'file/tail'

class Pow < Thor
  include Thor::Actions
  default_task :link

  map '-r' => 'restart'
  map '-l' => 'list'
  map '-L' => 'link'
  map '-o' => 'open'

  POWPATH = "/Users/#{`whoami`.chomp}/.pow"

  desc "link", "Link a pow"
  def link(name=nil)
    return unless is_powable?
    current_path = %x{pwd}.chomp
    name ||= current_dir_pow_name
    symlink_path = "#{POWPATH}/#{name}"
    FileUtils.ln_s(current_path, symlink_path) unless File.exists?(symlink_path)
    say "Your application is now available at http://#{name}.dev/"
  end

  desc "restart", "Restart current pow"
  def restart
    return unless is_powable?
    FileUtils.mkdir_p('tmp')
    %x{touch tmp/restart.txt}
  end

  desc "list", "List current pows"
  def list
    Dir[POWPATH + "/*"].map { |a| say File.basename(a) }
  end

  desc "open", "Open a pow in the browser"
  def open(name=nil)
    %x{open http://#{name || current_dir_pow_name}.dev}
  end

  desc "remove", "Remove a pow"
  def remove(name=nil)
    return unless is_powable?
    FileUtils.rm POWPATH + '/' + (name || File.basename(%x{pwd}.chomp))
  end

  desc "install", "Installs pow"
  def install
    %x{curl get.pow.cx | sh}
  end

  desc "uninstall", "Uninstalls pow"
  def uninstall
    %x{curl get.pow.cx/uninstall.sh | sh}
  end

  desc "log", "Tails the development log"
  def log
    File.open('log/development.log') do |log|
       log.extend(File::Tail)
       log.interval = 1
       log.backward(10)
       log.tail { |line| puts line }
     end
  end

  private

  def current_dir_pow_name
    File.basename(%x{pwd}.chomp).tr('_', '-')
  end

  def is_powable?
    if File.exists?('config.ru') || File.exists?('public/index.html')
      true
    else
      say "This does not appear to be a rack app as there is no config.ru."
      say "Pow can also host static apps if there is an index.html in public/"
      say "If you are in a Rails 2 application, you need a config.ru file"
      if yes? "Do you want to autogenerate a basic config.ru for Rails 2?"
        uri = URI.parse("https://gist.github.com/909308.txt")
        http = Net::HTTP.new(uri.host, uri.port)
        http.use_ssl = true
        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
        request = Net::HTTP::Get.new(uri.request_uri)
        create_file "config.ru",  http.request(request).body
      end
    end
  end
end
Pow.start
